@using Microsoft.AspNetCore.Components

<style>
    .input-base {
        display: flex;
        align-items: center;
        justify-content: space-between;
        position: relative;
        width: 100%;
        min-height: 3rem;
        border: 2px solid #808080;
        border-radius: 0.5rem;
        padding: 0.5rem 0.75rem;
        font-weight: 500;
        background-color: white;
        transition: border 0.2s;
    }

        .input-base:focus-within {
            border-color: #e39b34;
        }

        .input-base label {
            position: absolute;
            bottom: 2.25rem;
            left: 1.25rem;
            background-color: white;
            padding: 0 0.25rem;
            font-size: 0.813rem;
            font-weight: 600;
            color: #808080;
            pointer-events: none;
        }

        .input-base:focus-within label {
            color: #e39b34;
        }

        .input-base input {
            width: 100%;
            height: 100%;
            border: none;
            outline: none;
            background-color: transparent;
            font-size: 1rem;
            color: #808080;
            padding: 0.25rem 0;
        }

            .input-base input::placeholder {
                color: rgba(61, 61, 61, 0.6);
                font-weight: 500;
            }

            .input-base input:disabled {
                cursor: not-allowed;
                opacity: 0.6;
            }

    .slot-icon {
        margin-left: 0.5rem;
        width: 1rem;
        height: 1rem;
        color: #808080;
    }

</style>

<div class="input-base">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }

    <input id="@Id"
           type="@Type"
           placeholder="@Placeholder"
           @bind="Value"
           disabled="@Disabled" />

    @if (ChildContent != null)
    {
        <div class="slot-icon">
            @ChildContent
        </div>
    }
</div>

@code {
    [Parameter] public string? Id { get; set; } = $"input-{Guid.NewGuid().ToString("N")[..7]}";
    [Parameter] public string? Label { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public bool Disabled { get; set; } = false;

    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }
}
